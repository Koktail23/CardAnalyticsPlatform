# safe_load.py
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ String –¥–ª—è –Ω–∞—á–∞–ª–∞
"""

import pandas as pd
from clickhouse_driver import Client
import sys
from pathlib import Path


def safe_load_to_clickhouse(csv_file='data_100k.csv'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—Å—ë –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏"""

    print("\n" + "=" * 60)
    print("–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –í CLICKHOUSE")
    print("=" * 60)

    if not Path(csv_file).exists():
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse...")
    try:
        client = Client(
            host='localhost',
            port=9000,
            user='analyst',
            password='admin123'
        )
        client.execute('SELECT 1')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {csv_file}...")
    df_header = pd.read_csv(csv_file, nrows=0)
    columns = list(df_header.columns)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")

    # –°–æ–∑–¥–∞–µ–º –ë–î
    client.execute('CREATE DATABASE IF NOT EXISTS card_analytics')

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞...")
    client.execute('DROP TABLE IF EXISTS card_analytics.transactions_main')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É - –í–°–ï –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ String –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ String)...")

    columns_sql = []
    for col in columns:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        safe_col = col.replace('`', '').replace('"', '')
        columns_sql.append(f"    `{safe_col}` String")

    create_table = f"""
    CREATE TABLE card_analytics.transactions_main
    (
{','.join(columns_sql)}
    )
    ENGINE = MergeTree()
    ORDER BY tuple()
    """

    try:
        client.execute(create_table)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    # –ß–∏—Ç–∞–µ–º CSV —á–∞—Å—Ç—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    batch_size = 1000
    total_loaded = 0

    for chunk in pd.read_csv(csv_file, chunksize=batch_size):
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        chunk = chunk.fillna('')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—ë –≤ —Å—Ç—Ä–æ–∫–∏
        for col in chunk.columns:
            chunk[col] = chunk[col].astype(str)
            chunk[col] = chunk[col].replace('nan', '')

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        data = []
        for _, row in chunk.iterrows():
            # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –∫–æ–ª–æ–Ω–∫–∏
            row_values = [str(row[col]) for col in columns]
            data.append(row_values)

        try:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            client.execute(
                'INSERT INTO card_analytics.transactions_main VALUES',
                data
            )
            total_loaded += len(chunk)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if total_loaded % 10000 == 0:
                print(f"  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded:,} –∑–∞–ø–∏—Å–µ–π...")

        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞: {str(e)[:100]}")
            continue

    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded:,} –∑–∞–ø–∏—Å–µ–π!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    try:
        count = client.execute('SELECT count() FROM card_analytics.transactions_main')[0][0]
        print(f"\nüìä –ü–†–û–í–ï–†–ö–ê: –í —Ç–∞–±–ª–∏—Ü–µ {count:,} –∑–∞–ø–∏—Å–µ–π")

        if count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            print("\nüìã –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            sample = client.execute('SELECT * FROM card_analytics.transactions_main LIMIT 1')
            if sample:
                print(f"  –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç {len(sample[0])} –ø–æ–ª–µ–π")

            print("\n" + "=" * 60)
            print("‚úÖ –£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            print("=" * 60)

            print("\nüéØ –ß—Ç–æ –¥–∞–ª—å—à–µ:")
            print("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:")
            print("     http://localhost:8123/play")
            print("     SELECT * FROM card_analytics.transactions_main LIMIT 10")
            print()
            print("  2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:")
            print("     SELECT count(*) FROM card_analytics.transactions_main")
            print()
            print("  3. –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏")
            print("     (–ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")

            return True
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    return False


if __name__ == "__main__":
    csv_file = sys.argv[1] if len(sys.argv) > 1 else 'data_100k.csv'

    success = safe_load_to_clickhouse(csv_file)

    if not success:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)