# diagnose_and_load.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
"""

import pandas as pd
import numpy as np
from clickhouse_driver import Client
import sys
from pathlib import Path


def diagnose_csv_structure(csv_file='data_100k.csv'):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""

    print("\n" + "=" * 60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ CSV")
    print("=" * 60)

    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df = pd.read_csv(csv_file, nrows=1000)
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 1000 —Å—Ç—Ä–æ–∫ –∏–∑ {csv_file}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
    column_info = {}

    print("\nüìã –ê–ù–ê–õ–ò–ó –ö–û–õ–û–ù–û–ö:")
    print("-" * 60)

    for col in df.columns:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–µ
        non_null_count = df[col].notna().sum()
        null_count = df[col].isna().sum()
        unique_count = df[col].nunique()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        col_type = str(df[col].dtype)

        # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø
        sample_values = df[col].dropna().head(5).tolist()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –¥–ª—è ClickHouse
        ch_type = 'String'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–∞
        try:
            numeric_vals = pd.to_numeric(df[col], errors='coerce')
            if numeric_vals.notna().sum() > non_null_count * 0.9:  # 90% —á–∏—Å–ª–æ–≤—ã–µ
                if (numeric_vals % 1 == 0).all():  # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
                    max_val = numeric_vals.max()
                    min_val = numeric_vals.min()

                    if min_val >= 0:
                        if max_val < 256:
                            ch_type = 'UInt8'
                        elif max_val < 65536:
                            ch_type = 'UInt16'
                        elif max_val < 4294967296:
                            ch_type = 'UInt32'
                        else:
                            ch_type = 'UInt64'
                    else:
                        if -128 <= min_val and max_val < 128:
                            ch_type = 'Int8'
                        elif -32768 <= min_val and max_val < 32768:
                            ch_type = 'Int16'
                        elif -2147483648 <= min_val and max_val < 2147483648:
                            ch_type = 'Int32'
                        else:
                            ch_type = 'Int64'
                else:  # –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
                    ch_type = 'Float64'

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ nullable
                if null_count > 0:
                    ch_type = f'Nullable({ch_type})'
        except:
            pass

        # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if col in ['transaction_code', 'pinfl', 'terminal_id', 'ip', 'login']:
            ch_type = 'String'
        elif col in ['expire_date', 'issue_date']:
            ch_type = 'String'  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
        elif col == 'hpan':
            ch_type = 'Float64'  # –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PAN
        elif col in ['pinfl_flag', 'oked', 'respcode']:
            ch_type = 'Nullable(Float32)'

        column_info[col] = {
            'pandas_type': col_type,
            'clickhouse_type': ch_type,
            'nulls': null_count,
            'unique': unique_count,
            'samples': sample_values[:3]
        }

        if len(column_info) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
            print(f"\n{col}:")
            print(f"  Pandas —Ç–∏–ø: {col_type}")
            print(f"  ClickHouse —Ç–∏–ø: {ch_type}")
            print(f"  Nulls: {null_count}/{len(df)} ({null_count / len(df) * 100:.1f}%)")
            print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_count}")
            if sample_values:
                print(f"  –ü—Ä–∏–º–µ—Ä—ã: {sample_values[:3]}")

    if len(column_info) > 10:
        print(f"\n... –∏ –µ—â–µ {len(column_info) - 10} –∫–æ–ª–æ–Ω–æ–∫")

    return df, column_info


def create_table_from_analysis(client, column_info):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""

    print("\n" + "=" * 60)
    print("–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
    print("=" * 60)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
    try:
        client.execute('DROP TABLE IF EXISTS card_analytics.transactions_main')
        print("‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º CREATE TABLE
    columns_sql = []
    for col_name, info in column_info.items():
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
        safe_col_name = f"`{col_name}`"
        columns_sql.append(f"    {safe_col_name} {info['clickhouse_type']}")

    create_sql = f"""
    CREATE TABLE card_analytics.transactions_main
    (
{',\\n'.join(columns_sql)}
    )
    ENGINE = MergeTree()
    ORDER BY tuple()
    SETTINGS index_granularity = 8192
    """

    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
    try:
        client.execute('CREATE DATABASE IF NOT EXISTS card_analytics')
        client.execute(create_sql)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False


def load_data_smart(client, csv_file, column_info, batch_size=1000):
    """–£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤"""

    print("\n" + "=" * 60)
    print("–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å CSV
    print(f"\nüìä –ß—Ç–µ–Ω–∏–µ {csv_file}...")
    df = pd.read_csv(csv_file, low_memory=False)
    print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df):,} —Å—Ç—Ä–æ–∫")

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∞–Ω–∞–ª–∏–∑—É
    print("\nüîß –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")

    for col_name, info in column_info.items():
        if col_name not in df.columns:
            continue

        ch_type = info['clickhouse_type']

        try:
            if 'Int' in ch_type or 'UInt' in ch_type:
                # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
                if 'Nullable' in ch_type:
                    df[col_name] = pd.to_numeric(df[col_name], errors='coerce')
                else:
                    df[col_name] = pd.to_numeric(df[col_name], errors='coerce').fillna(0).astype('int64')

            elif 'Float' in ch_type:
                # –î—Ä–æ–±–Ω—ã–µ —Ç–∏–ø—ã
                df[col_name] = pd.to_numeric(df[col_name], errors='coerce')
                if 'Nullable' not in ch_type:
                    df[col_name] = df[col_name].fillna(0.0)

            else:
                # –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã
                df[col_name] = df[col_name].fillna('').astype(str)
                df[col_name] = df[col_name].replace('nan', '')

        except Exception as e:
            print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π {col_name}: {e}")

    print("‚úÖ –¢–∏–ø—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–∞–º–∏
    print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ {batch_size:,} –∑–∞–ø–∏—Å–µ–π...")

    total_loaded = 0
    failed_batches = []

    for i in range(0, len(df), batch_size):
        batch_num = i // batch_size + 1
        batch = df.iloc[i:i + batch_size]

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            data = []
            for _, row in batch.iterrows():
                row_data = []
                for col_name in column_info.keys():
                    if col_name in row.index:
                        val = row[col_name]
                        # –ó–∞–º–µ–Ω—è–µ–º pandas NaN –Ω–∞ Python None –¥–ª—è nullable –ø–æ–ª–µ–π
                        if pd.isna(val) and 'Nullable' in column_info[col_name]['clickhouse_type']:
                            row_data.append(None)
                        else:
                            row_data.append(val)
                    else:
                        row_data.append(None)
                data.append(tuple(row_data))

            # –í—Å—Ç–∞–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            client.execute(
                'INSERT INTO card_analytics.transactions_main VALUES',
                data,
                types_check=True  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            )

            total_loaded += len(batch)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
            if batch_num % 10 == 0 or batch_num == 1:
                print(f"  ‚úì –ë–∞—Ç—á {batch_num}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded:,} / {len(df):,}")

        except Exception as e:
            error_msg = str(e)[:200]
            print(f"  ‚úó –ë–∞—Ç—á {batch_num}: {error_msg}")
            failed_batches.append(batch_num)

            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if len(failed_batches) > 5:
                print("\n‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                break

    print(f"\n{'=' * 60}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"{'=' * 60}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded:,} –∑–∞–ø–∏—Å–µ–π")
    if failed_batches:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –±–∞—Ç—á–∏: {failed_batches[:10]}")

    return total_loaded


def main(csv_file='data_100k.csv'):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if not Path(csv_file).exists():
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse...")
    try:
        client = Client(
            host='localhost',
            port=9000,
            user='analyst',
            password='admin123'
        )
        client.execute('SELECT 1')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker: docker-compose up -d")
        return

    # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV
    df_sample, column_info = diagnose_csv_structure(csv_file)

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if not create_table_from_analysis(client, column_info):
        return

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loaded = load_data_smart(client, csv_file, column_info)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if loaded > 0:
        try:
            count = client.execute('SELECT count() FROM card_analytics.transactions_main')[0][0]
            print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê: –í —Ç–∞–±–ª–∏—Ü–µ {count:,} –∑–∞–ø–∏—Å–µ–π")

            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = client.execute('''
                SELECT 
                    count() as cnt,
                    count(DISTINCT hpan) as unique_cards,
                    avg(amount_uzs) as avg_amount
                FROM card_analytics.transactions_main
            ''')[0]

            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats[0]:,}")
            print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {stats[1]:,}")
            if stats[2]:
                print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {stats[2]:,.0f} UZS")

            print("\nüéâ –ì–û–¢–û–í–û! –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
            print("  1. –û—Ç–∫—Ä—ã—Ç—å ClickHouse UI: http://localhost:8123/play")
            print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑: python check_data.py")
            print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥: streamlit run run_app.py")

        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    else:
        print("\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")


if __name__ == "__main__":
    csv_file = sys.argv[1] if len(sys.argv) > 1 else 'data_100k.csv'
    main(csv_file)