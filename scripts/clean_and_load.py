# clean_and_load.py
"""
–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å –Ω—É–ª—è
"""

import pandas as pd
from clickhouse_driver import Client
import sys
from pathlib import Path


def clean_and_load(csv_file='data_100k.csv'):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""

    print("\n" + "=" * 60)
    print("–ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê")
    print("=" * 60)

    if not Path(csv_file).exists():
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse...")
    try:
        client = Client(
            host='localhost',
            port=9000,
            user='analyst',
            password='admin123'
        )
        client.execute('SELECT 1')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    # –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê
    print("\nüßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î...")

    try:
        # –£–¥–∞–ª—è–µ–º –í–°–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        client.execute('DROP DATABASE IF EXISTS card_analytics')
        print("‚úÖ –ë–î card_analytics —É–¥–∞–ª–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∏—Å—Ç—É—é –ë–î
        client.execute('CREATE DATABASE card_analytics')
        print("‚úÖ –ë–î card_analytics —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ")

    except Exception as e:
        print(f"‚ö†Ô∏è {e}")

    # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {csv_file}...")
    df_header = pd.read_csv(csv_file, nrows=0)
    columns = list(df_header.columns)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")

    # –°–æ–∑–¥–∞–µ–º –ü–†–û–°–¢–£–Æ —Ç–∞–±–ª–∏—Ü—É –≤ –ù–û–í–û–ô –ë–î
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã...")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    table_name = 'transactions_simple'

    columns_sql = []
    for col in columns:
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        safe_col = col.replace('`', '').replace('"', '').replace("'", '')
        columns_sql.append(f"    `{safe_col}` String")

    create_table = f"""
    CREATE TABLE card_analytics.{table_name}
    (
{','.join(columns_sql)}
    )
    ENGINE = MergeTree()
    ORDER BY tuple()
    SETTINGS index_granularity = 8192
    """

    try:
        client.execute(create_table)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –±–∞—Ç—á–µ–π - –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")

    # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å CSV
    df = pd.read_csv(csv_file)
    total_rows = len(df)
    print(f"  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {total_rows:,} —Å—Ç—Ä–æ–∫")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = df.fillna('')
    for col in df.columns:
        df[col] = df[col].astype(str).str.replace('nan', '')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 500 –∑–∞–ø–∏—Å–µ–π
    batch_size = 500
    loaded = 0
    failed = 0

    for i in range(0, total_rows, batch_size):
        batch = df.iloc[i:i + batch_size]

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        data = []
        for _, row in batch.iterrows():
            row_values = [str(row[col]) for col in columns]
            data.append(row_values)

        try:
            # –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞
            query = f"INSERT INTO card_analytics.{table_name} VALUES"
            client.execute(query, data)
            loaded += len(batch)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 –∑–∞–ø–∏—Å–µ–π
            if loaded % 5000 == 0:
                percent = (loaded / total_rows) * 100
                print(f"  ‚úì {loaded:,} / {total_rows:,} ({percent:.1f}%)")

        except Exception as e:
            failed += len(batch)
            if failed < 1000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏
                print(f"  ‚úó –û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {i // batch_size}: {str(e)[:50]}")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded:,} –∑–∞–ø–∏—Å–µ–π")
    if failed > 0:
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {failed:,} –∑–∞–ø–∏—Å–µ–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    if loaded > 0:
        try:
            count = client.execute(f'SELECT count() FROM card_analytics.{table_name}')[0][0]
            print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê: –í —Ç–∞–±–ª–∏—Ü–µ {count:,} –∑–∞–ø–∏—Å–µ–π")

            if count > 0:
                print("\n" + "=" * 60)
                print("üéâ –£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                print("=" * 60)

                print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ ClickHouse:")
                print("  http://localhost:8123/play")
                print()
                print("SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                print(f"  SELECT count() FROM card_analytics.{table_name};")
                print(f"  SELECT * FROM card_analytics.{table_name} LIMIT 10;")

                return True

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    return False


if __name__ == "__main__":
    csv_file = sys.argv[1] if len(sys.argv) > 1 else 'data_100k.csv'
    success = clean_and_load(csv_file)

    if not success:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)