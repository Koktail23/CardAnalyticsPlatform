# diagnose_data.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ - –ø–æ—á–µ–º—É MCC –∏ gender –ø—É—Å—Ç—ã–µ
"""

from clickhouse_driver import Client


def diagnose_data():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""

    print("\n" + "=" * 60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    client = Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123'
    )

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ MCC
    print("\nüìä –ê–ù–ê–õ–ò–ó MCC –ö–û–î–û–í:")
    print("-" * 40)

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è MCC
    mcc_values = client.execute("""
        SELECT 
            mcc,
            count() as cnt
        FROM card_analytics.transactions_simple
        GROUP BY mcc
        ORDER BY cnt DESC
        LIMIT 20
    """)

    print("–¢–æ–ø-20 –∑–Ω–∞—á–µ–Ω–∏–π MCC (–∫–∞–∫ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö):")
    for mcc, cnt in mcc_values:
        print(f"  '{mcc}': {cnt:,} –∑–∞–ø–∏—Å–µ–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ MCC
    mcc_numeric = client.execute("""
        SELECT 
            countIf(mcc = '') as empty,
            countIf(mcc = '0') as zero,
            countIf(toUInt16OrNull(mcc) IS NULL AND mcc != '') as non_numeric,
            countIf(toUInt16OrNull(mcc) > 0) as valid_mcc
        FROM card_analytics.transactions_simple
    """)[0]

    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MCC:")
    print(f"  ‚Ä¢ –ü—É—Å—Ç—ã–µ: {mcc_numeric[0]:,}")
    print(f"  ‚Ä¢ –ù—É–ª–µ–≤—ã–µ: {mcc_numeric[1]:,}")
    print(f"  ‚Ä¢ –ù–µ —á–∏—Å–ª–æ–≤—ã–µ: {mcc_numeric[2]:,}")
    print(f"  ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–µ (>0): {mcc_numeric[3]:,}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ gender
    print("\nüë• –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø GENDER:")
    print("-" * 40)

    gender_values = client.execute("""
        SELECT 
            gender,
            count() as cnt
        FROM card_analytics.transactions_simple
        GROUP BY gender
        ORDER BY cnt DESC
    """)

    print("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è gender:")
    for gender, cnt in gender_values:
        print(f"  '{gender}': {cnt:,} –∑–∞–ø–∏—Å–µ–π")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ P2P
    print("\nüí∏ –ê–ù–ê–õ–ò–ó P2P_FLAG:")
    print("-" * 40)

    p2p_values = client.execute("""
        SELECT 
            p2p_flag,
            count() as cnt
        FROM card_analytics.transactions_simple
        GROUP BY p2p_flag
        ORDER BY cnt DESC
    """)

    print("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è p2p_flag:")
    for p2p, cnt in p2p_values:
        print(f"  '{p2p}': {cnt:,} –∑–∞–ø–∏—Å–µ–π")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç (rday)
    print("\nüìÖ –ê–ù–ê–õ–ò–ó –î–ê–¢ (rday):")
    print("-" * 40)

    date_stats = client.execute("""
        SELECT 
            min(toUInt32OrNull(rday)) as min_rday,
            max(toUInt32OrNull(rday)) as max_rday,
            countIf(rday = '') as empty,
            countIf(toUInt32OrNull(rday) IS NULL AND rday != '') as non_numeric
        FROM card_analytics.transactions_simple
    """)[0]

    print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ rday: {date_stats[0]}")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ rday: {date_stats[1]}")
    print(f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {date_stats[1] - date_stats[0] if date_stats[0] and date_stats[1] else 'N/A'} –¥–Ω–µ–π")
    print(f"  ‚Ä¢ –ü—É—Å—Ç—ã—Ö: {date_stats[2]:,}")
    print(f"  ‚Ä¢ –ù–µ —á–∏—Å–ª–æ–≤—ã—Ö: {date_stats[3]:,}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç
    if date_stats[0]:
        from datetime import datetime, timedelta

        # –†–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –¥–∞—Ç—ã
        bases = {
            '1900-01-01': datetime(1900, 1, 1),
            '1970-01-01': datetime(1970, 1, 1),
            '2000-01-01': datetime(2000, 1, 1),
            '2020-01-01': datetime(2020, 1, 1)
        }

        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞—Ç:")
        for base_name, base_date in bases.items():
            min_date = base_date + timedelta(days=date_stats[0])
            max_date = base_date + timedelta(days=date_stats[1])
            print(f"  ‚Ä¢ –ë–∞–∑–∞ {base_name}: {min_date.date()} - {max_date.date()}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º
    print("\nüí∞ –ê–ù–ê–õ–ò–ó –°–£–ú–ú (amount_uzs):")
    print("-" * 40)

    amount_stats = client.execute("""
        SELECT 
            countIf(amount_uzs = '') as empty,
            countIf(amount_uzs = '0') as zero,
            countIf(toFloat64OrNull(amount_uzs) IS NULL AND amount_uzs != '') as non_numeric,
            min(toFloat64OrNull(amount_uzs)) as min_amount,
            max(toFloat64OrNull(amount_uzs)) as max_amount,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount
        FROM card_analytics.transactions_simple
    """)[0]

    print(f"  ‚Ä¢ –ü—É—Å—Ç—ã—Ö: {amount_stats[0]:,}")
    print(f"  ‚Ä¢ –ù—É–ª–µ–≤—ã—Ö: {amount_stats[1]:,}")
    print(f"  ‚Ä¢ –ù–µ —á–∏—Å–ª–æ–≤—ã—Ö: {amount_stats[2]:,}")
    print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {amount_stats[3]:,.0f} UZS" if amount_stats[3] else "N/A")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {amount_stats[4]:,.0f} UZS" if amount_stats[4] else "N/A")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {amount_stats[5]:,.0f} UZS" if amount_stats[5] else "N/A")

    # 6. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
    print("\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô:")
    print("-" * 40)

    samples = client.execute("""
        SELECT 
            mcc,
            gender,
            p2p_flag,
            amount_uzs,
            rday,
            merchant_name
        FROM card_analytics.transactions_simple
        LIMIT 5
    """)

    print("–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
    for i, (mcc, gender, p2p, amount, rday, merchant) in enumerate(samples, 1):
        print(f"\n{i}. MCC: '{mcc}' | Gender: '{gender}' | P2P: '{p2p}'")
        print(f"   Amount: '{amount}' | RDay: '{rday}'")
        print(f"   Merchant: '{merchant[:30]}...' " if len(merchant) > 30 else f"   Merchant: '{merchant}'")

    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)

    print("""
1. –ï—Å–ª–∏ MCC –≤—Å–µ –Ω—É–ª–µ–≤—ã–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ:
   - –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ merchant_name –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏

2. –ï—Å–ª–∏ gender –ø—É—Å—Ç–æ–π:
   - –ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–æ—Å—å –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
   - –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)

3. –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É 2000-01-01 (–¥–∞—Ç—ã –±—É–¥—É—Ç 2024-2025)
   - –ò–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç rday

4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
   python fix_table_final.py
    """)


if __name__ == "__main__":
    diagnose_data()