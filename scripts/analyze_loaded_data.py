# analyze_loaded_data.py
"""
–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
"""

from clickhouse_driver import Client
import pandas as pd


def analyze_and_optimize():
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""

    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    client = Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123'
    )

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É transactions_simple")
    count = client.execute('SELECT count() FROM card_analytics.transactions_simple')[0][0]
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count:,}")

    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
    print("\n" + "-" * 60)
    print("üîç –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –ü–û–õ–ï–ô:")
    print("-" * 60)

    # 1. –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (rday)
    print("\nüìÖ –ü–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    date_stats = client.execute("""
        SELECT 
            toUInt32(min(rday)) as min_rday,
            toUInt32(max(rday)) as max_rday,
            toDate(min(toUInt32(rday))) as min_date,
            toDate(max(toUInt32(rday))) as max_date
        FROM card_analytics.transactions_simple
        WHERE rday != ''
    """)[0]

    print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π timestamp: {date_stats[0]}")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π timestamp: {date_stats[1]}")
    print(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: —Å {date_stats[2]} –ø–æ {date_stats[3]}")

    # 2. –°—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("\nüí∞ –°—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (amount_uzs):")
    amount_stats = client.execute("""
        SELECT 
            count() as total,
            countIf(amount_uzs = '') as empty,
            countIf(amount_uzs != '' AND toFloat64OrNull(amount_uzs) IS NULL) as non_numeric,
            min(toFloat64OrNull(amount_uzs)) as min_amount,
            max(toFloat64OrNull(amount_uzs)) as max_amount,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount,
            sum(toFloat64OrNull(amount_uzs)) as total_amount
        FROM card_analytics.transactions_simple
    """)[0]

    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {amount_stats[0]:,}")
    print(f"  ‚Ä¢ –ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {amount_stats[1]:,}")
    print(f"  ‚Ä¢ –ù–µ—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {amount_stats[2]:,}")
    if amount_stats[3]:
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {amount_stats[3]:,.0f} UZS")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {amount_stats[4]:,.0f} UZS")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {amount_stats[5]:,.0f} UZS")
        print(f"  ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {amount_stats[6]:,.0f} UZS")

    # 3. MCC –∫–æ–¥—ã
    print("\nüè™ MCC –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    mcc_stats = client.execute("""
        SELECT 
            mcc,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume
        FROM card_analytics.transactions_simple
        WHERE mcc != '' AND toUInt16OrNull(mcc) IS NOT NULL
        GROUP BY mcc
        ORDER BY cnt DESC
        LIMIT 10
    """)

    if mcc_stats:
        print("  –¢–æ–ø-10 MCC –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        for mcc, cnt, volume in mcc_stats:
            volume_str = f"{volume:,.0f}" if volume else "0"
            print(f"    ‚Ä¢ MCC {mcc}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({volume_str} UZS)")

    # 4. P2P —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüí∏ P2P –ø–µ—Ä–µ–≤–æ–¥—ã:")
    p2p_stats = client.execute("""
        SELECT 
            p2p_flag,
            count() as cnt,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount,
            sum(toFloat64OrNull(amount_uzs)) as total_amount
        FROM card_analytics.transactions_simple
        WHERE p2p_flag IN ('0', '1', 'True', 'False')
        GROUP BY p2p_flag
    """)

    total_txn = 0
    for flag, cnt, avg_amt, total_amt in p2p_stats:
        total_txn += cnt
        flag_type = "P2P" if flag in ('1', 'True') else "–û–±—ã—á–Ω—ã–µ"
        avg_str = f"{avg_amt:,.0f}" if avg_amt else "0"
        total_str = f"{total_amt:,.0f}" if total_amt else "0"
        print(f"  ‚Ä¢ {flag_type}: {cnt:,} ({cnt / count * 100:.1f}%) - —Å—Ä–µ–¥–Ω—è—è {avg_str} UZS")

    # 5. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")

    # –ö–∞—Ä—Ç—ã
    unique_cards = client.execute("""
        SELECT uniq(hpan) 
        FROM card_analytics.transactions_simple 
        WHERE hpan != ''
    """)[0][0]
    print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç (hpan): {unique_cards:,}")

    # –ö–ª–∏–µ–Ω—Ç—ã
    unique_clients = client.execute("""
        SELECT uniq(pinfl) 
        FROM card_analytics.transactions_simple 
        WHERE pinfl != ''
    """)[0][0]
    print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (pinfl): {unique_clients:,}")

    # –ú–µ—Ä—á–∞–Ω—Ç—ã
    unique_merchants = client.execute("""
        SELECT uniq(merchant_name) 
        FROM card_analytics.transactions_simple 
        WHERE merchant_name != ''
    """)[0][0]
    print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤: {unique_merchants:,}")

    # 6. –ë–∞–Ω–∫–∏
    print("\nüè¶ –¢–æ–ø-5 –±–∞–Ω–∫–æ–≤-—ç–º–∏—Ç–µ–Ω—Ç–æ–≤:")
    bank_stats = client.execute("""
        SELECT 
            emitent_bank,
            count() as cnt
        FROM card_analytics.transactions_simple
        WHERE emitent_bank != ''
        GROUP BY emitent_bank
        ORDER BY cnt DESC
        LIMIT 5
    """)

    for bank, cnt in bank_stats:
        print(f"  ‚Ä¢ {bank}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # 7. –†–µ–≥–∏–æ–Ω—ã
    print("\nüìç –¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    region_stats = client.execute("""
        SELECT 
            emitent_region,
            count() as cnt
        FROM card_analytics.transactions_simple
        WHERE emitent_region != ''
        GROUP BY emitent_region
        ORDER BY cnt DESC
        LIMIT 5
    """)

    for region, cnt in region_stats:
        print(f"  ‚Ä¢ {region}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print("\n" + "=" * 60)
    print("üîß –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´")
    print("=" * 60)

    create_optimized = """
    CREATE TABLE IF NOT EXISTS card_analytics.transactions_optimized
    (
        -- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        hpan String,
        transaction_code String,
        rday UInt32,

        -- –°—É–º–º—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NULL)
        amount_uzs Float64 DEFAULT 0,
        reqamt Float64 DEFAULT 0,
        conamt Float64 DEFAULT 0,

        -- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        mcc UInt16 DEFAULT 0,
        merchant_name String,
        merchant_type String,

        -- P2P
        p2p_flag UInt8 DEFAULT 0,
        p2p_type String,
        sender_hpan String,
        receiver_hpan String,

        -- –ö–ª–∏–µ–Ω—Ç
        pinfl String,
        gender String,
        age_group String,

        -- –ë–∞–Ω–∫ –∏ —Ä–µ–≥–∏–æ–Ω
        emitent_bank String,
        emitent_region String,
        acquirer_bank String,
        acquirer_region String,

        -- –ö–∞—Ä—Ç–∞
        card_type String,
        card_product_type String,

        -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        hour_num UInt8 DEFAULT 0,
        minute_num UInt8 DEFAULT 0,

        -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ String
        day_type String,
        terminal_type String,
        credit_debit String,
        reversal_flag String,
        respcode String
    )
    ENGINE = MergeTree()
    PARTITION BY toYYYYMM(toDate(rday))
    ORDER BY (rday, hpan, transaction_code)
    SETTINGS index_granularity = 8192
    """

    try:
        client.execute(create_optimized)
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –ü–µ—Ä–µ–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
        print("\nüì§ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")

        insert_optimized = """
        INSERT INTO card_analytics.transactions_optimized
        SELECT
            hpan,
            transaction_code,
            toUInt32OrDefault(rday, 0) as rday,
            toFloat64OrDefault(amount_uzs, 0) as amount_uzs,
            toFloat64OrDefault(reqamt, 0) as reqamt,
            toFloat64OrDefault(conamt, 0) as conamt,
            toUInt16OrDefault(mcc, 0) as mcc,
            merchant_name,
            merchant_type,
            toUInt8OrDefault(p2p_flag, 0) as p2p_flag,
            p2p_type,
            sender_hpan,
            receiver_hpan,
            pinfl,
            gender,
            age_group,
            emitent_bank,
            emitent_region,
            acquirer_bank,
            acquirer_region,
            card_type,
            card_product_type,
            toUInt8OrDefault(hour_num, 0) as hour_num,
            toUInt8OrDefault(minute_num, 0) as minute_num,
            day_type,
            terminal_type,
            credit_debit,
            reversal_flag,
            respcode
        FROM card_analytics.transactions_simple
        """

        client.execute(insert_optimized)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        opt_count = client.execute('SELECT count() FROM card_analytics.transactions_optimized')[0][0]
        print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {opt_count:,} –∑–∞–ø–∏—Å–µ–π")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("\nüìë –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")

        try:
            client.execute("""
                ALTER TABLE card_analytics.transactions_optimized 
                ADD INDEX idx_mcc mcc TYPE minmax GRANULARITY 4
            """)
            print("  ‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ MCC")
        except:
            pass

        try:
            client.execute("""
                ALTER TABLE card_analytics.transactions_optimized 
                ADD INDEX idx_amount amount_uzs TYPE minmax GRANULARITY 4
            """)
            print("  ‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ —Å—É–º–º–∞–º")
        except:
            pass

        print("\n" + "=" * 60)
        print("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)

        print("\nüìä –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("  1. transactions_simple - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ String (100,000 –∑–∞–ø–∏—Å–µ–π)")
        print("  2. transactions_optimized - —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏")

        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥:")
        print("     streamlit run run_app.py")
        print()
        print("  2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ ClickHouse:")
        print("     http://localhost:8123/play")
        print()
        print("  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("     SELECT * FROM card_analytics.transactions_optimized LIMIT 10")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")


if __name__ == "__main__":
    analyze_and_optimize()