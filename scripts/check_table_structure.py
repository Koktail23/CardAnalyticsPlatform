#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –≤ ClickHouse
"""

from clickhouse_driver import Client


def check_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö"""

    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    client = Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123',
        database='card_analytics'
    )

    tables_to_check = ['transactions_simple', 'transactions_optimized']

    for table_name in tables_to_check:
        print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print("-" * 40)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            structure = client.execute(f"DESCRIBE {table_name}")

            # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            key_fields = ['amount_uzs', 'p2p_flag', 'hour_num', 'rday', 'transaction_date', 'mcc']

            print("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:")
            for field_name, field_type, *_ in structure:
                if field_name in key_fields:
                    print(f"  ‚Ä¢ {field_name}: {field_type}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
            print("\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å):")
            sample = client.execute(f"""
                SELECT 
                    amount_uzs,
                    p2p_flag,
                    hour_num,
                    rday,
                    mcc
                FROM {table_name}
                LIMIT 1
            """)

            if sample:
                row = sample[0]
                print(f"  amount_uzs: {row[0]} (—Ç–∏–ø: {type(row[0]).__name__})")
                print(f"  p2p_flag: {row[1]} (—Ç–∏–ø: {type(row[1]).__name__})")
                print(f"  hour_num: {row[2]} (—Ç–∏–ø: {type(row[2]).__name__})")
                print(f"  rday: {row[3]} (—Ç–∏–ø: {type(row[3]).__name__})")
                print(f"  mcc: {row[4]} (—Ç–∏–ø: {type(row[4]).__name__})")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = client.execute(f"""
                SELECT 
                    count() as total,
                    count(amount_uzs) as amount_filled,
                    count(p2p_flag) as p2p_filled
                FROM {table_name}
            """)[0]

            print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats[0]:,}")
            print(f"  –ó–∞–ø–æ–ª–Ω–µ–Ω–æ amount_uzs: {stats[1]:,}")
            print(f"  –ó–∞–ø–æ–ª–Ω–µ–Ω–æ p2p_flag: {stats[2]:,}")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)


if __name__ == "__main__":
    check_table_structure()