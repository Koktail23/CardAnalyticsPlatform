# run_analysis.py
"""
–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
"""

from clickhouse_driver import Client
import pandas as pd
from datetime import datetime


def run_analysis():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–∏—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

    print("\n" + "=" * 60)
    print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–†–¢–û–ß–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    client = Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123'
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    tables = client.execute("""
        SELECT name, total_rows
        FROM system.tables
        WHERE database = 'card_analytics'
            AND name NOT LIKE '.%'
        ORDER BY name
    """)

    print("\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    table_to_use = None
    for name, rows in tables:
        print(f"  ‚Ä¢ {name}: {rows:,} –∑–∞–ø–∏—Å–µ–π")
        if rows > 0 and not table_to_use:
            table_to_use = f"card_analytics.{name}"

    if not table_to_use:
        print("\n‚ùå –ù–µ—Ç —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏!")
        return

    print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É: {table_to_use}")

    # 1. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\n" + "-" * 60)
    print("1Ô∏è‚É£ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("-" * 60)

    general_stats = client.execute(f"""
        SELECT 
            count() as total_transactions,
            sum(toFloat64OrNull(amount_uzs)) as total_volume,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount,
            max(toFloat64OrNull(amount_uzs)) as max_amount,
            min(toFloat64OrNull(amount_uzs)) as min_amount,
            uniq(hpan) as unique_cards,
            uniq(pinfl) as unique_clients,
            uniq(merchant_name) as unique_merchants
        FROM {table_to_use}
    """)[0]

    print(f"üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {general_stats[0]:,}")
    print(f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {general_stats[1]:,.0f} UZS" if general_stats[1] else "üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: –ù/–î")
    print(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {general_stats[2]:,.0f} UZS" if general_stats[2] else "üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: –ù/–î")
    print(f"üìä –ú–∞–∫—Å. —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {general_stats[3]:,.0f} UZS" if general_stats[3] else "üìä –ú–∞–∫—Å. —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –ù/–î")
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {general_stats[5]:,}")
    print(f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {general_stats[6]:,}")
    print(f"üè™ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤: {general_stats[7]:,}")

    # 2. –¢–û–ü MCC –ö–ê–¢–ï–ì–û–†–ò–ô
    print("\n" + "-" * 60)
    print("2Ô∏è‚É£ –¢–û–ü-10 MCC –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("-" * 60)

    mcc_stats = client.execute(f"""
        SELECT 
            mcc,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount
        FROM {table_to_use}
        WHERE mcc != '' AND toUInt16OrNull(mcc) IS NOT NULL
        GROUP BY mcc
        ORDER BY cnt DESC
        LIMIT 10
    """)

    if mcc_stats:
        for i, (mcc, cnt, volume, avg_amt) in enumerate(mcc_stats, 1):
            volume_str = f"{volume:,.0f}" if volume else "0"
            avg_str = f"{avg_amt:,.0f}" if avg_amt else "0"
            percent = cnt / general_stats[0] * 100
            print(f"{i:2}. MCC {mcc}: {cnt:,} ({percent:.1f}%) | –û–±—ä–µ–º: {volume_str} UZS | –°—Ä–µ–¥–Ω–∏–π: {avg_str} UZS")

    # 3. P2P –ê–ù–ê–õ–ò–ó
    print("\n" + "-" * 60)
    print("3Ô∏è‚É£ P2P –ê–ù–ê–õ–ò–ó")
    print("-" * 60)

    p2p_stats = client.execute(f"""
        SELECT 
            CASE 
                WHEN p2p_flag IN ('1', 'True') OR p2p_flag = '1' THEN 'P2P'
                ELSE '–ü–æ–∫—É–ø–∫–∏'
            END as type,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount
        FROM {table_to_use}
        GROUP BY type
    """)

    for tx_type, cnt, volume, avg_amt in p2p_stats:
        percent = cnt / general_stats[0] * 100
        volume_str = f"{volume:,.0f}" if volume else "0"
        avg_str = f"{avg_amt:,.0f}" if avg_amt else "0"
        emoji = "üí∏" if tx_type == "P2P" else "üõí"
        print(f"{emoji} {tx_type}: {cnt:,} ({percent:.1f}%) | –û–±—ä–µ–º: {volume_str} UZS | –°—Ä–µ–¥–Ω–∏–π: {avg_str} UZS")

    # 4. –¢–û–ü –ë–ê–ù–ö–û–í
    print("\n" + "-" * 60)
    print("4Ô∏è‚É£ –¢–û–ü-10 –ë–ê–ù–ö–û–í-–≠–ú–ò–¢–ï–ù–¢–û–í")
    print("-" * 60)

    bank_stats = client.execute(f"""
        SELECT 
            emitent_bank,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            uniq(hpan) as unique_cards
        FROM {table_to_use}
        WHERE emitent_bank != ''
        GROUP BY emitent_bank
        ORDER BY cnt DESC
        LIMIT 10
    """)

    for i, (bank, cnt, volume, cards) in enumerate(bank_stats, 1):
        percent = cnt / general_stats[0] * 100
        volume_str = f"{volume:,.0f}" if volume else "0"
        print(f"{i:2}. {bank}: {cnt:,} ({percent:.1f}%) | –ö–∞—Ä—Ç: {cards:,} | –û–±—ä–µ–º: {volume_str} UZS")

    # 5. –¢–û–ü –†–ï–ì–ò–û–ù–û–í
    print("\n" + "-" * 60)
    print("5Ô∏è‚É£ –¢–û–ü-10 –†–ï–ì–ò–û–ù–û–í")
    print("-" * 60)

    region_stats = client.execute(f"""
        SELECT 
            emitent_region,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            uniq(pinfl) as unique_clients
        FROM {table_to_use}
        WHERE emitent_region != ''
        GROUP BY emitent_region
        ORDER BY cnt DESC
        LIMIT 10
    """)

    for i, (region, cnt, volume, clients) in enumerate(region_stats, 1):
        percent = cnt / general_stats[0] * 100
        volume_str = f"{volume:,.0f}" if volume else "0"
        print(f"{i:2}. {region}: {cnt:,} ({percent:.1f}%) | –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients:,} | –û–±—ä–µ–º: {volume_str} UZS")

    # 6. –¢–û–ü –ú–ï–†–ß–ê–ù–¢–û–í
    print("\n" + "-" * 60)
    print("6Ô∏è‚É£ –¢–û–ü-20 –ú–ï–†–ß–ê–ù–¢–û–í")
    print("-" * 60)

    merchant_stats = client.execute(f"""
        SELECT 
            merchant_name,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            avg(toFloat64OrNull(amount_uzs)) as avg_check
        FROM {table_to_use}
        WHERE merchant_name != ''
        GROUP BY merchant_name
        ORDER BY volume DESC
        LIMIT 20
    """)

    for i, (merchant, cnt, volume, avg_check) in enumerate(merchant_stats, 1):
        volume_str = f"{volume:,.0f}" if volume else "0"
        avg_str = f"{avg_check:,.0f}" if avg_check else "0"
        print(f"{i:2}. {merchant[:50]}: {cnt:,} —Ç—Ä–∞–Ω–∑. | {volume_str} UZS | –°—Ä.—á–µ–∫: {avg_str}")

    # 7. –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó
    print("\n" + "-" * 60)
    print("7Ô∏è‚É£ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú")
    print("-" * 60)

    hourly_stats = client.execute(f"""
        SELECT 
            toUInt8OrDefault(hour_num, 0) as hour,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume
        FROM {table_to_use}
        WHERE hour_num != ''
        GROUP BY hour
        ORDER BY hour
        LIMIT 24
    """)

    if hourly_stats:
        print("\n–ß–∞—Å | –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | –ì—Ä–∞—Ñ–∏–∫")
        print("-" * 40)
        max_cnt = max(h[1] for h in hourly_stats) if hourly_stats else 1

        for hour, cnt, volume in hourly_stats:
            bar_length = int(cnt / max_cnt * 30)
            bar = "‚ñà" * bar_length
            print(f"{hour:02d}  | {cnt:6,}    | {bar}")

    # 8. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–õ–£
    print("\n" + "-" * 60)
    print("8Ô∏è‚É£ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–õ–£")
    print("-" * 60)

    gender_stats = client.execute(f"""
        SELECT 
            gender,
            count() as cnt,
            sum(toFloat64OrNull(amount_uzs)) as volume,
            avg(toFloat64OrNull(amount_uzs)) as avg_amount
        FROM {table_to_use}
        WHERE gender IN ('M', 'F', 'Male', 'Female')
        GROUP BY gender
    """)

    for gender, cnt, volume, avg_amt in gender_stats:
        percent = cnt / general_stats[0] * 100
        volume_str = f"{volume:,.0f}" if volume else "0"
        avg_str = f"{avg_amt:,.0f}" if avg_amt else "0"
        emoji = "üë®" if gender in ('M', 'Male') else "üë©"
        gender_name = "–ú—É–∂—á–∏–Ω—ã" if gender in ('M', 'Male') else "–ñ–µ–Ω—â–∏–Ω—ã"
        print(f"{emoji} {gender_name}: {cnt:,} ({percent:.1f}%) | –û–±—ä–µ–º: {volume_str} UZS | –°—Ä–µ–¥–Ω–∏–π: {avg_str} UZS")

    # 9. –¢–ò–ü–´ –ö–ê–†–¢
    print("\n" + "-" * 60)
    print("9Ô∏è‚É£ –¢–ò–ü–´ –ö–ê–†–¢")
    print("-" * 60)

    card_stats = client.execute(f"""
        SELECT 
            card_type,
            count() as cnt,
            uniq(hpan) as unique_cards,
            sum(toFloat64OrNull(amount_uzs)) as volume
        FROM {table_to_use}
        WHERE card_type != ''
        GROUP BY card_type
        ORDER BY cnt DESC
        LIMIT 10
    """)

    for card_type, cnt, cards, volume in card_stats:
        percent = cnt / general_stats[0] * 100
        volume_str = f"{volume:,.0f}" if volume else "0"
        print(f"üí≥ {card_type}: {cnt:,} ({percent:.1f}%) | –ö–∞—Ä—Ç: {cards:,} | –û–±—ä–µ–º: {volume_str} UZS")

    # 10. –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•
    print("\n" + "-" * 60)
    print("üîü –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•")
    print("-" * 60)

    quality_stats = client.execute(f"""
        SELECT 
            countIf(hpan = '') as empty_hpan,
            countIf(amount_uzs = '') as empty_amount,
            countIf(mcc = '') as empty_mcc,
            countIf(merchant_name = '') as empty_merchant,
            countIf(pinfl = '') as empty_pinfl
        FROM {table_to_use}
    """)[0]

    total = general_stats[0]
    print(f"–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    print(f"  ‚Ä¢ hpan: {quality_stats[0]:,} ({quality_stats[0] / total * 100:.1f}%)")
    print(f"  ‚Ä¢ amount_uzs: {quality_stats[1]:,} ({quality_stats[1] / total * 100:.1f}%)")
    print(f"  ‚Ä¢ mcc: {quality_stats[2]:,} ({quality_stats[2] / total * 100:.1f}%)")
    print(f"  ‚Ä¢ merchant_name: {quality_stats[3]:,} ({quality_stats[3] / total * 100:.1f}%)")
    print(f"  ‚Ä¢ pinfl: {quality_stats[4]:,} ({quality_stats[4] / total * 100:.1f}%)")

    print("\n" + "=" * 60)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)

    print("\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  1. –°–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: python fix_optimized_table.py")
    print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: streamlit run run_app.py")
    print("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ClickHouse UI –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤: http://localhost:8123/play")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ analysis_results.txt...")
    with open('analysis_results.txt', 'w', encoding='utf-8') as f:
        f.write(f"–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now()}\n")
        f.write(f"–¢–∞–±–ª–∏—Ü–∞: {table_to_use}\n")
        f.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {general_stats[0]:,}\n")
        f.write(f"–û–±—â–∏–π –æ–±—ä–µ–º: {general_stats[1]:,.0f} UZS\n" if general_stats[1] else "")

    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ analysis_results.txt")


if __name__ == "__main__":
    run_analysis()