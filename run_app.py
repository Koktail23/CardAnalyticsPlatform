# run_app.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import streamlit as st
from clickhouse_driver import Client
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

st.set_page_config(
    page_title="Card Analytics Platform",
    page_icon="üí≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
</style>
""", unsafe_allow_html=True)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
@st.cache_resource
def get_client():
    return Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123',
        database='card_analytics'  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ë–î
    )


client = get_client()

# Header
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.title("üí≥ Card Analytics Platform")
    st.markdown("**Powered by ClickHouse** | Real-time processing of millions of transactions")

# Sidebar
with st.sidebar:
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

    # –í–´–ë–û–† –¢–ê–ë–õ–ò–¶–´
    st.subheader("üóÇÔ∏è –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    available_tables = []
    table_descriptions = {
        'transactions_simple': 'üìù –ü—Ä–æ—Å—Ç–∞—è (–≤—Å–µ String)',
        'transactions_optimized': '‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
        'transactions_main': 'üè¢ –û—Å–Ω–æ–≤–Ω–∞—è'
    }

    for table_name in table_descriptions.keys():
        try:
            count = client.execute(f'SELECT count() FROM {table_name}')[0][0]
            if count > 0:
                available_tables.append((table_name, count))
        except:
            pass

    if available_tables:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è selectbox
        table_options = []
        for table_name, count in available_tables:
            desc = table_descriptions.get(table_name, table_name)
            table_options.append(f"{desc} ({count:,} –∑–∞–ø–∏—Å–µ–π)")

        # –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        selected_table_option = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            table_options,
            index=0
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        selected_table = available_tables[table_options.index(selected_table_option)][0]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
        st.session_state['selected_table'] = selected_table

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        st.success(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: **{selected_table}**")
    else:
        st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏")
        selected_table = 'transactions_simple'  # fallback

    st.divider()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.cache_data.clear()
        st.rerun()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü")
    for table_name, count in available_tables:
        desc = table_descriptions.get(table_name, table_name)
        st.metric(desc, f"{count:,}")

    # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ transaction_date –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if selected_table == 'transactions_optimized':
            date_range = client.execute(f'''
                SELECT 
                    min(transaction_date) as min_date,
                    max(transaction_date) as max_date
                FROM {selected_table}
            ''')[0]

            if date_range[0]:
                st.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_range[0]} - {date_range[1]}")
        else:
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º rday
            date_range = client.execute(f'''
                SELECT 
                    min(toUInt32OrNull(rday)) as min_rday,
                    max(toUInt32OrNull(rday)) as max_rday
                FROM {selected_table}
            ''')[0]

            if date_range[0]:
                from datetime import datetime, timedelta

                # –ë–∞–∑–∞ 1900-01-01 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞—Ç
                base_date = datetime(1900, 1, 1)
                min_date = base_date + timedelta(days=date_range[0])
                max_date = base_date + timedelta(days=date_range[1])
                st.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min_date.date()} - {max_date.date()}")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {e}")

    st.divider()

    # –§–∏–ª—å—Ç—Ä—ã
    st.header("üîç –§–∏–ª—å—Ç—Ä—ã")

    # –í—ã–±–æ—Ä –±–∞–Ω–∫–∞
    try:
        banks = client.execute(f'''
            SELECT DISTINCT emitent_bank 
            FROM {selected_table}
            WHERE emitent_bank != ''
            ORDER BY emitent_bank
            LIMIT 20
        ''')
        bank_list = ['–í—Å–µ'] + [b[0] for b in banks]
        selected_bank = st.selectbox("–ë–∞–Ω–∫-—ç–º–∏—Ç–µ–Ω—Ç", bank_list)
    except:
        selected_bank = '–í—Å–µ'

    # –ü–µ—Ä–∏–æ–¥ (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    date_filter = st.date_input(
        "–ü–µ—Ä–∏–æ–¥",
        value=(datetime(2025, 1, 1), datetime(2025, 4, 30)),
        max_value=datetime.now()
    )

# –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìà Dashboard",
    "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "üö® Fraud Detection",
    "üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
    "üì§ –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö"
])

with tab1:
    st.header("Dashboard - –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    selected_table = st.session_state.get('selected_table', 'transactions_simple')
    st.caption(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: **{selected_table}**")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        count_check = client.execute(f'SELECT count() FROM {selected_table}')[0][0]

        if count_check > 0:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ - —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            if selected_table == 'transactions_optimized':
                # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã - –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                metrics = client.execute(f'''
                    SELECT 
                        count() as total_transactions,
                        sum(amount_uzs) as total_volume,
                        avg(amount_uzs) as avg_amount,
                        uniq(hpan) as unique_cards,
                        uniq(merchant_name) as unique_merchants,
                        countIf(p2p_flag = 1) as p2p_count,
                        max(rday) as last_transaction
                    FROM {selected_table}
                ''')[0]
            else:
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã - —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤
                metrics = client.execute(f'''
                    SELECT 
                        count() as total_transactions,
                        sum(toFloat64OrNull(amount_uzs)) as total_volume,
                        avg(toFloat64OrNull(amount_uzs)) as avg_amount,
                        uniq(hpan) as unique_cards,
                        uniq(merchant_name) as unique_merchants,
                        countIf(p2p_flag IN ('True', '1')) as p2p_count,
                        max(toUInt32OrNull(rday)) as last_transaction
                    FROM {selected_table}
                ''')[0]

            # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric(
                    "üì¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    f"{metrics[0]:,}",
                    f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ"
                )

            with col2:
                st.metric(
                    "üí∞ –û–±—ä–µ–º",
                    f"{metrics[1]:,.0f} UZS" if metrics[1] else "0 UZS",
                    f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {metrics[2]:,.0f} UZS" if metrics[2] else "N/A"
                )

            with col3:
                st.metric(
                    "üí≥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç",
                    f"{metrics[3]:,}",
                    f"–ú–µ—Ä—á–∞–Ω—Ç–æ–≤: {metrics[4]:,}"
                )

            with col4:
                p2p_rate = (metrics[5] / metrics[0] * 100) if metrics[0] > 0 else 0
                st.metric(
                    "üí∏ P2P –ø–µ—Ä–µ–≤–æ–¥—ã",
                    f"{p2p_rate:.1f}%",
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {metrics[5]:,}"
                )

            st.divider()

            # –ì—Ä–∞—Ñ–∏–∫–∏
            col1, col2 = st.columns(2)

            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞—Ç–∞–º (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º rday –≤ –¥–∞—Ç—ã)
                if selected_table == 'transactions_optimized':
                    # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –ø–æ–ª–µ transaction_date
                    daily_data = pd.DataFrame(client.execute(f'''
                        SELECT 
                            transaction_date as date,
                            count() as transactions,
                            sum(amount_uzs) as volume
                        FROM {selected_table}
                        GROUP BY date
                        ORDER BY date
                    '''))
                else:
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º rday
                    daily_data = pd.DataFrame(client.execute(f'''
                        SELECT 
                            toDate('1900-01-01') + toUInt32OrNull(rday) as date,
                            count() as transactions,
                            sum(toFloat64OrNull(amount_uzs)) as volume
                        FROM {selected_table}
                        WHERE toUInt32OrNull(rday) IS NOT NULL
                        GROUP BY date
                        ORDER BY date
                    '''))

                if not daily_data.empty:
                    daily_data.columns = ['date', 'transactions', 'volume']

                    fig = px.area(
                        daily_data,
                        x='date',
                        y='volume',
                        title='üìà –û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º',
                        labels={'volume': '–û–±—ä–µ–º (UZS)', 'date': '–î–∞—Ç–∞'}
                    )
                    fig.update_traces(fillcolor='rgba(102, 126, 234, 0.5)', line_color='rgb(102, 126, 234)')
                    st.plotly_chart(fig, use_container_width=True)

            with col2:
                # –¢–æ–ø MCC –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if selected_table == 'transactions_optimized':
                    # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã MCC —É–∂–µ —á–∏—Å–ª–æ–≤–æ–π
                    mcc_data = pd.DataFrame(client.execute(f'''
                        SELECT 
                            CAST(mcc AS String) as mcc_code,
                            count() as count,
                            sum(amount_uzs) as total
                        FROM {selected_table}
                        WHERE mcc > 0
                        GROUP BY mcc_code
                        ORDER BY count DESC
                        LIMIT 10
                    '''))
                else:
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                    mcc_data = pd.DataFrame(client.execute(f'''
                        SELECT 
                            CAST(toUInt16OrNull(mcc) AS String) as mcc_code,
                            count() as count,
                            sum(toFloat64OrNull(amount_uzs)) as total
                        FROM {selected_table}
                        WHERE toUInt16OrNull(mcc) > 0
                        GROUP BY mcc_code
                        ORDER BY count DESC
                        LIMIT 10
                    '''))

                if not mcc_data.empty:
                    mcc_data.columns = ['category', 'count', 'total']
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è MCC –∫–æ–¥–æ–≤
                    mcc_descriptions = {
                        '5999': '–†–æ–∑–Ω–∏—á–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã',
                        '6011': 'ATM —Å–Ω—è—Ç–∏–µ',
                        '7372': '–ö–æ–º–ø. —É—Å–ª—É–≥–∏',
                        '5411': '–ü—Ä–æ–¥—É–∫—Ç—ã',
                        '6012': '–§–∏–Ω. –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã',
                        '4814': '–¢–µ–ª–µ–∫–æ–º',
                        '5541': '–ê–ó–°',
                        '5812': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã'
                    }
                    mcc_data['category'] = mcc_data['category'].apply(
                        lambda x: f"{mcc_descriptions.get(x, f'MCC {x}')}"
                    )

                    fig = px.pie(
                        mcc_data,
                        values='count',
                        names='category',
                        title='üõçÔ∏è –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É',
                        hole=0.4
                    )
                    st.plotly_chart(fig, use_container_width=True)

            # –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            st.subheader("‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")

            if selected_table == 'transactions_optimized':
                # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã - –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
                hourly_data = pd.DataFrame(client.execute(f'''
                    SELECT 
                        hour_num as hour,
                        count() as count,
                        avg(amount_uzs) as avg_amount
                    FROM {selected_table}
                    WHERE hour_num < 24
                    GROUP BY hour
                    ORDER BY hour
                '''))
            else:
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã - —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
                hourly_data = pd.DataFrame(client.execute(f'''
                    SELECT 
                        toUInt8OrNull(hour_num) as hour,
                        count() as count,
                        avg(toFloat64OrNull(amount_uzs)) as avg_amount
                    FROM {selected_table}
                    WHERE toUInt8OrNull(hour_num) IS NOT NULL AND toUInt8OrNull(hour_num) < 24
                    GROUP BY hour
                    ORDER BY hour
                '''))

            if not hourly_data.empty:
                hourly_data.columns = ['hour', 'count', 'avg_amount']

                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=hourly_data['hour'],
                    y=hourly_data['count'],
                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    marker_color='lightblue',
                    yaxis='y'
                ))
                fig.add_trace(go.Scatter(
                    x=hourly_data['hour'],
                    y=hourly_data['avg_amount'],
                    name='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
                    marker_color='red',
                    yaxis='y2',
                    mode='lines+markers'
                ))

                fig.update_layout(
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º',
                    xaxis_title='–ß–∞—Å',
                    yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', side='left'),
                    yaxis2=dict(title='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (UZS)', overlaying='y', side='right'),
                    hovermode='x unified',
                    height=400
                )

                st.plotly_chart(fig, use_container_width=True)

        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç—ã Python.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

with tab2:
    st.header("üîç –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    selected_table = st.session_state.get('selected_table', 'transactions_simple')
    st.caption(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: **{selected_table}**")

    analysis_type = st.radio(
        "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–ê–Ω–∞–ª–∏–∑ –ø–æ –±–∞–Ω–∫–∞–º", "–ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ä—á–∞–Ω—Ç–∞–º", "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
        horizontal=True
    )

    if analysis_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ –±–∞–Ω–∫–∞–º":
        # –¢–æ–ø –±–∞–Ω–∫–æ–≤
        if selected_table == 'transactions_optimized':
            bank_data = pd.DataFrame(client.execute(f'''
                SELECT 
                    emitent_bank,
                    count() as cnt,
                    sum(amount_uzs) as volume,
                    avg(amount_uzs) as avg_amount
                FROM {selected_table}
                WHERE emitent_bank != ''
                GROUP BY emitent_bank
                ORDER BY cnt DESC
                LIMIT 15
            '''))
        else:
            bank_data = pd.DataFrame(client.execute(f'''
                SELECT 
                    emitent_bank,
                    count() as cnt,
                    sum(toFloat64OrNull(amount_uzs)) as volume,
                    avg(toFloat64OrNull(amount_uzs)) as avg_amount
                FROM {selected_table}
                WHERE emitent_bank != ''
                GROUP BY emitent_bank
                ORDER BY cnt DESC
                LIMIT 15
            '''))

        if not bank_data.empty:
            bank_data.columns = ['bank', 'count', 'volume', 'avg_amount']

            fig = px.bar(
                bank_data,
                x='bank',
                y='count',
                title='–¢–æ–ø –±–∞–Ω–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                labels={'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'bank': '–ë–∞–Ω–∫'}
            )
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("üö® Fraud Detection")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    selected_table = st.session_state.get('selected_table', 'transactions_simple')
    st.caption(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: **{selected_table}**")

    st.info("–ú–æ–¥—É–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–∞–º –æ—Ç–≤–µ—Ç–∞ (respcode)")

    resp_stats = pd.DataFrame(client.execute(f'''
        SELECT 
            respcode,
            count() as cnt
        FROM {selected_table}
        WHERE respcode != ''
        GROUP BY respcode
        ORDER BY cnt DESC
        LIMIT 10
    '''))

    if not resp_stats.empty:
        resp_stats.columns = ['code', 'count']
        st.dataframe(resp_stats, use_container_width=True)

with tab4:
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    selected_table = st.session_state.get('selected_table', 'transactions_simple')
    st.caption(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: **{selected_table}**")

    # –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(client.execute(f'SELECT * FROM {selected_table} LIMIT 1000'))

    if not df.empty:
        columns = [col[0] for col in client.execute(f'DESCRIBE {selected_table}')]
        df.columns = columns[:len(df.columns)]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = client.execute(f'SELECT count() FROM {selected_table}')[0][0]
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π –∏–∑ {total_count:,}")

        # –î–æ–±–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        with col1:
            bank_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ –±–∞–Ω–∫—É",
                ['–í—Å–µ'] + df['emitent_bank'].unique().tolist()[:20]
            )
        with col2:
            mcc_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ MCC",
                ['–í—Å–µ'] + df['mcc'].unique().tolist()[:20]
            )
        with col3:
            p2p_filter = st.selectbox(
                "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                ['–í—Å–µ', 'P2P', '–ü–æ–∫—É–ø–∫–∏']
            )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        if bank_filter != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['emitent_bank'] == bank_filter]
        if mcc_filter != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['mcc'] == mcc_filter]
        if p2p_filter == 'P2P':
            filtered_df = filtered_df[filtered_df['p2p_flag'].isin(['True', '1'])]
        elif p2p_filter == '–ü–æ–∫—É–ø–∫–∏':
            filtered_df = filtered_df[~filtered_df['p2p_flag'].isin(['True', '1'])]

        st.dataframe(filtered_df, use_container_width=True)

with tab5:
    st.header("üì§ –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    selected_table = st.session_state.get('selected_table', 'transactions_simple')
    st.caption(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: **{selected_table}**")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            if selected_table == 'transactions_optimized':
                stats = client.execute(f'''
                    SELECT 
                        count() as total,
                        uniq(hpan) as unique_cards,
                        uniq(pinfl) as unique_clients,
                        uniq(merchant_name) as unique_merchants,
                        uniq(emitent_bank) as unique_banks,
                        sum(amount_uzs) as total_volume
                    FROM {selected_table}
                ''')[0]
            else:
                stats = client.execute(f'''
                    SELECT 
                        count() as total,
                        uniq(hpan) as unique_cards,
                        uniq(pinfl) as unique_clients,
                        uniq(merchant_name) as unique_merchants,
                        uniq(emitent_bank) as unique_banks,
                        sum(toFloat64OrNull(amount_uzs)) as total_volume
                    FROM {selected_table}
                ''')[0]

            st.metric("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", f"{stats[0]:,}")
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç", f"{stats[1]:,}")
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{stats[2]:,}")
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤", f"{stats[3]:,}")
            st.metric("–ë–∞–Ω–∫–æ–≤-—ç–º–∏—Ç–µ–Ω—Ç–æ–≤", f"{stats[4]:,}")
            if stats[5]:
                st.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{stats[5]:,.0f} UZS")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    with col2:
        st.subheader("üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")

        try:
            if selected_table == 'transactions_optimized':
                quality = client.execute(f'''
                    SELECT 
                        countIf(amount_uzs = 0) as empty_amounts,
                        countIf(mcc = 0) as empty_mcc,
                        countIf(merchant_name = '') as empty_merchant,
                        countIf(p2p_flag = 1) as p2p_count,
                        countIf(gender IN ('–ú', '–ñ')) as with_gender,
                        count() as total
                    FROM {selected_table}
                ''')[0]
            else:
                quality = client.execute(f'''
                    SELECT 
                        countIf(amount_uzs = '' OR amount_uzs = '0') as empty_amounts,
                        countIf(mcc = '' OR mcc = '0') as empty_mcc,
                        countIf(merchant_name = '') as empty_merchant,
                        countIf(p2p_flag IN ('True', '1')) as p2p_count,
                        countIf(gender IN ('–ú', '–ñ')) as with_gender,
                        count() as total
                    FROM {selected_table}
                ''')[0]

            total = quality[5]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            st.progress(1 - quality[0] / total, text=f"–°—É–º–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {(1 - quality[0] / total) * 100:.1f}%")
            st.progress(1 - quality[1] / total, text=f"MCC –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {(1 - quality[1] / total) * 100:.1f}%")
            st.progress(1 - quality[2] / total, text=f"–ú–µ—Ä—á–∞–Ω—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {(1 - quality[2] / total) * 100:.1f}%")

            st.info(f"üí∏ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {quality[3]:,} ({quality[3] / total * 100:.1f}%)")
            st.info(f"üë• –° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–∞: {quality[4]:,} ({quality[4] / total * 100:.1f}%)")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

        st.divider()

        # –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤
        st.subheader("üìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤")
        regions = pd.DataFrame(client.execute(f'''
            SELECT 
                emitent_region,
                count() as cnt
            FROM {selected_table}
            WHERE emitent_region != ''
            GROUP BY emitent_region
            ORDER BY cnt DESC
            LIMIT 5
        '''))

        if not regions.empty:
            regions.columns = ['region', 'count']
            for _, row in regions.iterrows():
                st.write(f"‚Ä¢ {row['region']}: {row['count']:,}")

if __name__ == "__main__":
    st.write("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑: streamlit run run_app.py")