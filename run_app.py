# run_app.py - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import streamlit as st
from clickhouse_driver import Client
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

st.set_page_config(
    page_title="Card Analytics Platform",
    page_icon="üí≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
</style>
""", unsafe_allow_html=True)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
@st.cache_resource
def get_client():
    return Client(
        host='localhost',
        port=9000,
        user='admin',
        password='admin123',
        database='datagate'
    )


client = get_client()

# Header
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.title("üí≥ Card Analytics Platform")
    st.markdown("**Powered by ClickHouse** | Real-time processing of millions of transactions")

# Sidebar
with st.sidebar:
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.cache_data.clear()
        st.rerun()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü
    try:
        tables_info = {
            'card_transactions': 'üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
            'sales_data': 'üí∞ –ü—Ä–æ–¥–∞–∂–∏',
            'data_quality_checks': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏',
        }

        for table, label in tables_info.items():
            try:
                count = client.execute(f'SELECT count() FROM {table}')[0][0]
                st.metric(label, f"{count:,}")
            except:
                pass

        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        try:
            date_range = client.execute('''
                SELECT 
                    min(transaction_date) as min_date,
                    max(transaction_date) as max_date
                FROM card_transactions
            ''')[0]

            if date_range[0]:
                st.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_range[0]} - {date_range[1]}")
        except:
            pass

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.divider()

    # –§–∏–ª—å—Ç—Ä—ã
    st.header("üîç –§–∏–ª—å—Ç—Ä—ã")

    # –í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
    try:
        companies = client.execute('''
            SELECT DISTINCT company_id 
            FROM card_transactions 
            ORDER BY company_id
        ''')
        company_list = ['–í—Å–µ'] + [c[0] for c in companies]
        selected_company = st.selectbox("–ö–æ–º–ø–∞–Ω–∏—è", company_list)
    except:
        selected_company = '–í—Å–µ'

    # –ü–µ—Ä–∏–æ–¥
    date_filter = st.date_input(
        "–ü–µ—Ä–∏–æ–¥",
        value=(datetime.now() - timedelta(days=30), datetime.now()),
        max_value=datetime.now()
    )

# –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìà Dashboard",
    "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "üö® Fraud Detection",
    "üìä Sales Analysis",
    "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
])

with tab1:
    st.header("Dashboard - –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        count_check = client.execute('SELECT count() FROM card_transactions')[0][0]

        if count_check > 0:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = client.execute('''
                SELECT 
                    count() as total_transactions,
                    sum(amount) as total_volume,
                    avg(amount) as avg_amount,
                    uniq(card_masked) as unique_cards,
                    uniq(merchant_name) as unique_merchants,
                    countIf(is_fraud = 1) as fraud_count,
                    max(transaction_time) as last_transaction
                FROM card_transactions
                WHERE transaction_date >= today() - 30
            ''')[0]

            # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric(
                    "üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (30 –¥–Ω–µ–π)",
                    f"{metrics[0]:,}",
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è: {metrics[6].strftime('%H:%M') if metrics[6] else 'N/A'}"
                )

            with col2:
                st.metric(
                    "üí∞ –û–±—ä–µ–º",
                    f"${metrics[1]:,.2f}" if metrics[1] else "$0",
                    f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${metrics[2]:.2f}" if metrics[2] else "N/A"
                )

            with col3:
                st.metric(
                    "üí≥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç",
                    f"{metrics[3]:,}",
                    f"–ú–µ—Ä—á–∞–Ω—Ç–æ–≤: {metrics[4]:,}"
                )

            with col4:
                fraud_rate = (metrics[5] / metrics[0] * 100) if metrics[0] > 0 else 0
                st.metric(
                    "‚ö†Ô∏è Fraud Rate",
                    f"{fraud_rate:.3f}%",
                    f"–°–ª—É—á–∞–µ–≤: {metrics[5]}",
                    delta_color="inverse"
                )

            st.divider()

            # –ì—Ä–∞—Ñ–∏–∫–∏
            col1, col2 = st.columns(2)

            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º
                daily_data = pd.DataFrame(client.execute('''
                    SELECT 
                        transaction_date as date,
                        count() as transactions,
                        sum(amount) as volume
                    FROM card_transactions
                    WHERE transaction_date >= today() - 30
                    GROUP BY date
                    ORDER BY date
                '''))

                if not daily_data.empty:
                    daily_data.columns = ['date', 'transactions', 'volume']

                    fig = px.area(
                        daily_data,
                        x='date',
                        y='volume',
                        title='üìà –û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º',
                        labels={'volume': '–û–±—ä–µ–º ($)', 'date': '–î–∞—Ç–∞'}
                    )
                    fig.update_traces(fillcolor='rgba(102, 126, 234, 0.5)', line_color='rgb(102, 126, 234)')
                    st.plotly_chart(fig, use_container_width=True)

            with col2:
                # –¢–æ–ø MCC –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                mcc_data = pd.DataFrame(client.execute('''
                    SELECT 
                        mcc_description,
                        count() as count,
                        sum(amount) as total
                    FROM card_transactions
                    WHERE transaction_date >= today() - 30
                        AND mcc_description != ''
                    GROUP BY mcc_description
                    ORDER BY total DESC
                    LIMIT 10
                '''))

                if not mcc_data.empty:
                    mcc_data.columns = ['category', 'count', 'total']

                    fig = px.pie(
                        mcc_data,
                        values='total',
                        names='category',
                        title='üõçÔ∏è –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –æ–±—ä–µ–º—É',
                        hole=0.4
                    )
                    st.plotly_chart(fig, use_container_width=True)

            # –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            st.subheader("‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")

            hourly_data = pd.DataFrame(client.execute('''
                SELECT 
                    toHour(transaction_time) as hour,
                    count() as count,
                    avg(amount) as avg_amount
                FROM card_transactions
                WHERE transaction_date >= today() - 7
                GROUP BY hour
                ORDER BY hour
            '''))

            if not hourly_data.empty:
                hourly_data.columns = ['hour', 'count', 'avg_amount']

                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=hourly_data['hour'],
                    y=hourly_data['count'],
                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    marker_color='lightblue',
                    yaxis='y'
                ))
                fig.add_trace(go.Scatter(
                    x=hourly_data['hour'],
                    y=hourly_data['avg_amount'],
                    name='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
                    marker_color='red',
                    yaxis='y2',
                    mode='lines+markers'
                ))

                fig.update_layout(
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º',
                    xaxis_title='–ß–∞—Å',
                    yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', side='left'),
                    yaxis2=dict(title='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ($)', overlaying='y', side='right'),
                    hovermode='x unified',
                    height=400
                )

                st.plotly_chart(fig, use_container_width=True)

        else:
            st.info(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö' –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

with tab2:
    st.header("üîç –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

    analysis_type = st.radio(
        "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", "–ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ä—á–∞–Ω—Ç–∞–º", "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
        horizontal=True
    )

    if analysis_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        st.info("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

with tab3:
    st.header("üö® Fraud Detection")

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
    st.info("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

with tab4:
    st.header("üìä –ê–Ω–∞–ª–∏–∑ sales_data")

    # –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(client.execute('SELECT * FROM sales_data LIMIT 1000'))

    if not df.empty:
        columns = [col[0] for col in client.execute('DESCRIBE sales_data')]
        df.columns = columns[:len(df.columns)]

        st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π –∏–∑ 10,000")
        st.dataframe(df, use_container_width=True)

with tab5:
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        num_records = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", min_value=100, max_value=100000, value=5000, step=1000)

        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
            with st.spinner(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_records} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...'):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                import random

                test_data = []
                mcc_categories = {
                    '5411': 'Grocery Stores',
                    '5541': 'Gas Stations',
                    '5812': 'Restaurants',
                    '5999': 'Retail',
                    '4111': 'Transport',
                }

                for i in range(num_records):
                    mcc = random.choice(list(mcc_categories.keys()))
                    test_data.append((
                        f'TXN{datetime.now().strftime("%Y%m%d")}{i:06d}',
                        f'COMP{random.randint(1, 20):02d}',
                        f'****{random.randint(1000, 9999)}',
                        round(random.uniform(10, 5000), 2),
                        'USD',
                        mcc,
                        mcc_categories[mcc],
                        f'Merchant_{random.randint(1, 500)}',
                        f'MER{random.randint(100000, 999999)}',
                        (datetime.now() - timedelta(days=random.randint(0, 90))).date(),
                        datetime.now() - timedelta(hours=random.randint(0, 2160)),
                        'completed',
                        1 if random.random() < 0.001 else 0,
                        random.uniform(0, 1)
                    ))

                # –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
                client.execute('''
                    INSERT INTO card_transactions 
                    (transaction_id, company_id, card_masked, amount, currency, 
                     mcc_code, mcc_description, merchant_name, merchant_id,
                     transaction_date, transaction_time, status, is_fraud, fraud_score)
                    VALUES
                ''', test_data)

                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {num_records} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!")
                st.balloons()
                st.cache_data.clear()
                st.rerun()

    with col2:
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞")

        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])

        if uploaded_file:
            df = pd.read_csv(uploaded_file)
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head(), use_container_width=True)

            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ë–î", type="primary", use_container_width=True):
                # –ó–¥–µ—Å—å –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
                st.rerun()

if __name__ == "__main__":
    st.write("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑: streamlit run run_app.py")