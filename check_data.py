# check_data.py
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ClickHouse
"""

from clickhouse_driver import Client
import sys


def check_clickhouse_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ClickHouse"""

    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í CLICKHOUSE")
    print("=" * 60)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client = Client(
            host='localhost',
            port=9000,
            user='analyst',
            password='admin123'
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        print("\nüìä –¢–ê–ë–õ–ò–¶–´ –í card_analytics:")
        print("-" * 40)

        tables = client.execute('''
            SELECT name, total_rows, formatReadableSize(total_bytes) as size
            FROM system.tables
            WHERE database = 'card_analytics'
                AND name NOT LIKE '.%'  -- –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            ORDER BY name
        ''')

        if tables:
            for name, rows, size in tables:
                print(f"  ‚Ä¢ {name}: {rows:,} —Å—Ç—Ä–æ–∫ ({size})")
        else:
            print("  ‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ transactions_main
        count = client.execute('SELECT count() FROM card_analytics.transactions_main')[0][0]

        if count == 0:
            print("\n‚ùå –¢–∞–±–ª–∏—Ü–∞ transactions_main –ø—É—Å—Ç–∞—è!")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö:")
            print("  python load_data_fixed.py")
            return

        print(f"\n‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ transactions_main: {count:,} –∑–∞–ø–∏—Å–µ–π")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
        print("-" * 40)

        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        date_range = client.execute('''
            SELECT 
                toDate(min(rday)) as min_date,
                toDate(max(rday)) as max_date,
                dateDiff('day', min_date, max_date) as days
            FROM card_analytics.transactions_main
        ''')[0]

        print(f"\nüìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  –° {date_range[0]} –ø–æ {date_range[1]} ({date_range[2]} –¥–Ω–µ–π)")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = client.execute('''
            SELECT
                count() as total,
                sum(amount_uzs) as volume,
                avg(amount_uzs) as avg_amount,
                max(amount_uzs) as max_amount,
                uniq(hpan) as unique_cards,
                uniq(pinfl) as unique_clients,
                uniq(merchant_name) as unique_merchants
            FROM card_analytics.transactions_main
        ''')[0]

        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"  ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {metrics[1]:,.0f} UZS")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {metrics[2]:,.0f} UZS")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {metrics[3]:,.0f} UZS")

        print(f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
        print(f"  ‚Ä¢ –ö–∞—Ä—Ç: {metrics[4]:,}")
        print(f"  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {metrics[5]:,}")
        print(f"  ‚Ä¢ –ú–µ—Ä—á–∞–Ω—Ç–æ–≤: {metrics[6]:,}")

        # MCC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüè™ –¢–æ–ø-5 MCC –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        mcc_stats = client.execute('''
            SELECT mcc, count() as cnt, sum(amount_uzs) as volume
            FROM card_analytics.transactions_main
            GROUP BY mcc
            ORDER BY cnt DESC
            LIMIT 5
        ''')

        for mcc, cnt, volume in mcc_stats:
            print(f"  ‚Ä¢ MCC {mcc}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({volume:,.0f} UZS)")

        # P2P —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        p2p_stats = client.execute('''
            SELECT 
                p2p_flag,
                count() as cnt,
                sum(amount_uzs) as volume,
                avg(amount_uzs) as avg_amount
            FROM card_analytics.transactions_main
            GROUP BY p2p_flag
        ''')

        print(f"\nüí∏ P2P —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for flag, cnt, volume, avg_amt in p2p_stats:
            p2p_type = "P2P" if flag == 1 else "–ü–æ–∫—É–ø–∫–∏"
            percent = cnt / count * 100
            print(f"  ‚Ä¢ {p2p_type}: {cnt:,} ({percent:.1f}%) - {volume:,.0f} UZS")

        # –ë–∞–Ω–∫–∏
        print(f"\nüè¶ –¢–æ–ø-5 –±–∞–Ω–∫–æ–≤-—ç–º–∏—Ç–µ–Ω—Ç–æ–≤:")
        bank_stats = client.execute('''
            SELECT emitent_bank, count() as cnt
            FROM card_analytics.transactions_main
            WHERE emitent_bank != ''
            GROUP BY emitent_bank
            ORDER BY cnt DESC
            LIMIT 5
        ''')

        for bank, cnt in bank_stats:
            print(f"  ‚Ä¢ {bank}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        # –†–µ–≥–∏–æ–Ω—ã
        print(f"\nüìç –¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤:")
        region_stats = client.execute('''
            SELECT emitent_region, count() as cnt
            FROM card_analytics.transactions_main
            WHERE emitent_region != ''
            GROUP BY emitent_region
            ORDER BY cnt DESC
            LIMIT 5
        ''')

        for region, cnt in region_stats:
            print(f"  ‚Ä¢ {region}: {cnt:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        print("\n" + "=" * 60)
        print("‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´ –ò –ì–û–¢–û–í–´ –ö –ê–ù–ê–õ–ò–ó–£!")
        print("=" * 60)

        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥: streamlit run run_app.py")
        print("  2. –û—Ç–∫—Ä—ã—Ç—å ClickHouse UI: http://localhost:8123/play")
        print("  3. –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–ª–∞–Ω—É (–ù–µ–¥–µ–ª—è 2)")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. Docker –∑–∞–ø—É—â–µ–Ω: docker-compose ps")
        print("  2. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: python load_data_fixed.py")


if __name__ == "__main__":
    check_clickhouse_data()