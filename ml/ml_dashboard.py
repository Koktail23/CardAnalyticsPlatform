#!/usr/bin/env python3
"""
ML Dashboard - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö ML –º–æ–¥–µ–ª–µ–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from clickhouse_driver import Client
import joblib
import numpy as np
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ML Analytics Dashboard",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin: 10px 0;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
    .success-metric {
        color: #00cc88;
        font-weight: bold;
    }
    .warning-metric {
        color: #ffcc00;
        font-weight: bold;
    }
    .danger-metric {
        color: #ff4444;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)


@st.cache_resource
def get_client():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse"""
    return Client(
        host='localhost',
        port=9000,
        user='analyst',
        password='admin123',
        database='card_analytics'
    )


@st.cache_resource
def load_models():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    models = {}

    try:
        models['fraud_xgb'] = joblib.load('fraud_xgboost.pkl')
        models['fraud_scaler'] = joblib.load('fraud_scaler.pkl')
        st.sidebar.success("‚úÖ Fraud Detection –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except:
        st.sidebar.warning("‚ö†Ô∏è Fraud Detection –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    try:
        models['prophet'] = joblib.load('prophet_main.pkl')
        st.sidebar.success("‚úÖ Prophet –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except:
        st.sidebar.warning("‚ö†Ô∏è Prophet –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    try:
        models['kmeans'] = joblib.load('kmeans_model.pkl')
        models['segment_scaler'] = joblib.load('segment_scaler.pkl')
        st.sidebar.success("‚úÖ Segmentation –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except:
        st.sidebar.warning("‚ö†Ô∏è Segmentation –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return models


def fraud_detection_tab(client, models):
    """–í–∫–ª–∞–¥–∫–∞ Fraud Detection"""

    st.header("üö® Fraud Detection Analytics")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if 'fraud_xgb' not in models:
        st.error("–ú–æ–¥–µ–ª—å Fraud Detection –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python ml/fraud_detection.py`")
        return

    # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            "ROC-AUC Score",
            "0.876",
            "‚úÖ –ü—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π 0.85",
            delta_color="normal"
        )

    with col2:
        st.metric(
            "Precision (Fraud)",
            "67%",
            "–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
        )

    with col3:
        st.metric(
            "Recall (Fraud)",
            "82%",
            "–ü–æ–ª–Ω–æ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
        )

    with col4:
        st.metric(
            "F1-Score",
            "0.73",
            "–ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ"
        )

    st.divider()

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üéØ –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

        # –¢–æ–ø –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏
        feature_importance = pd.DataFrame({
            'feature': ['p2p_flag', 'amount_uzs', 'is_capital', 'txn_count_30d',
                        'hour_num', 'amount_deviation', 'amount_change_ratio'],
            'importance': [0.7267, 0.1564, 0.0557, 0.0156, 0.0110, 0.0088, 0.0042]
        })

        fig = px.bar(
            feature_importance,
            x='importance',
            y='feature',
            orientation='h',
            title='–¢–æ–ø-7 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ—Ä–æ–¥–∞',
            labels={'importance': '–í–∞–∂–Ω–æ—Å—Ç—å', 'feature': '–ü—Ä–∏–∑–Ω–∞–∫'},
            color='importance',
            color_continuous_scale='Viridis'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)

        # –ò–Ω—Å–∞–π—Ç—ã
        st.info("""
        **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**
        - üî¥ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ—Ä–æ–¥–∞ (72.67%)
        - üí∞ –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –≤—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (15.64%)
        - üìç –õ–æ–∫–∞—Ü–∏—è (—Å—Ç–æ–ª–∏—Ü–∞) –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∏—Å–∫ (5.57%)
        """)

    with col2:
        st.subheader("üìä Confusion Matrix")

        # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
        cm_data = pd.DataFrame({
            'Predicted Normal': [8950, 1423],
            'Predicted Fraud': [3221, 6406]
        }, index=['Actual Normal', 'Actual Fraud'])

        fig = px.imshow(
            cm_data.values,
            labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ", y="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            x=['Normal', 'Fraud'],
            y=['Normal', 'Fraud'],
            text_auto=True,
            color_continuous_scale='RdYlGn_r',
            title='–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (20,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ
        tn, fp, fn, tp = 8950, 3221, 1423, 6406

        col_a, col_b = st.columns(2)
        with col_a:
            st.metric("True Positive Rate", f"{tp / (tp + fn) * 100:.1f}%")
            st.metric("False Positive Rate", f"{fp / (fp + tn) * 100:.1f}%")
        with col_b:
            st.metric("True Negative Rate", f"{tn / (tn + fp) * 100:.1f}%")
            st.metric("False Negative Rate", f"{fn / (fn + tp) * 100:.1f}%")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–æ–¥–∞
    st.divider()
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–æ–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    fraud_by_hour = client.execute("""
        SELECT 
            hour_num,
            countIf(respcode NOT IN ('', '00', '0')) as fraud_count,
            count() as total
        FROM transactions_optimized
        GROUP BY hour_num
        ORDER BY hour_num
    """)

    if fraud_by_hour:
        df_hour = pd.DataFrame(fraud_by_hour, columns=['hour', 'fraud', 'total'])
        df_hour['fraud_rate'] = (df_hour['fraud'] / df_hour['total'] * 100).round(2)

        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=df_hour['hour'],
            y=df_hour['total'],
            name='–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            marker_color='lightblue',
            yaxis='y'
        ))
        fig.add_trace(go.Scatter(
            x=df_hour['hour'],
            y=df_hour['fraud_rate'],
            name='% –§—Ä–æ–¥–∞',
            marker_color='red',
            yaxis='y2',
            mode='lines+markers',
            line=dict(width=3)
        ))

        fig.update_layout(
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–æ–¥–∞ –ø–æ —á–∞—Å–∞–º',
            xaxis_title='–ß–∞—Å',
            yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', side='left'),
            yaxis2=dict(title='% –§—Ä–æ–¥–∞', overlaying='y', side='right'),
            hovermode='x unified',
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)


def segmentation_tab(client, models):
    """–í–∫–ª–∞–¥–∫–∞ Customer Segmentation"""

    st.header("üë• Customer Segmentation Analytics")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if 'kmeans' not in models:
        st.warning("–ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python ml/customer_segmentation.py`")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    segments_data = client.execute("""
        SELECT 
            rfm_segment,
            count() as cnt,
            avg(txn_amount_30d) as avg_amount,
            avg(txn_count_30d) as avg_txn
        FROM customer_segments cs
        JOIN card_features cf ON cs.hpan = cf.hpan
        GROUP BY rfm_segment
        ORDER BY cnt DESC
    """)

    if segments_data:
        df_segments = pd.DataFrame(segments_data,
                                   columns=['segment', 'count', 'avg_amount', 'avg_txn'])

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        col1, col2, col3, col4 = st.columns(4)

        total = df_segments['count'].sum()
        champions = df_segments[df_segments['segment'] == 'Champions']['count'].values
        champions_pct = (champions[0] / total * 100) if len(champions) > 0 else 0

        lost = df_segments[df_segments['segment'] == 'Lost']['count'].values
        lost_pct = (lost[0] / total * 100) if len(lost) > 0 else 0

        with col1:
            st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{total:,}")

        with col2:
            st.metric("Champions", f"{champions_pct:.1f}%", "–õ—É—á—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã")

        with col3:
            st.metric("At Risk", "11.2%", "–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", delta_color="inverse")

        with col4:
            st.metric("Lost", f"{lost_pct:.1f}%", "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", delta_color="inverse")

        st.divider()

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        col1, col2 = st.columns(2)

        with col1:
            # Pie chart —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            fig = px.pie(
                df_segments,
                values='count',
                names='segment',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ RFM —Å–µ–≥–º–µ–Ω—Ç–∞–º',
                hole=0.4,
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            # Bar chart –ø–æ –æ–±—ä–µ–º–∞–º
            fig = px.bar(
                df_segments,
                x='segment',
                y='avg_amount',
                title='–°—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π –æ–±—ä–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º',
                labels={'avg_amount': '–û–±—ä–µ–º (UZS)', 'segment': '–°–µ–≥–º–µ–Ω—Ç'},
                color='avg_amount',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig, use_container_width=True)

    # K-means –∫–ª–∞—Å—Ç–µ—Ä—ã
    st.divider()
    st.subheader("üî¨ K-means –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")

    kmeans_data = client.execute("""
        SELECT 
            kmeans_cluster,
            count() as cnt,
            avg(p2p_ratio_30d) as p2p_ratio,
            avg(txn_amount_30d) as avg_amount
        FROM customer_segments cs
        JOIN card_features cf ON cs.hpan = cf.hpan
        GROUP BY kmeans_cluster
    """)

    if kmeans_data:
        df_kmeans = pd.DataFrame(kmeans_data,
                                 columns=['cluster', 'count', 'p2p_ratio', 'avg_amount'])

        # –î–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        cluster_names = {
            0: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            1: '–ü—Ä–µ–º–∏—É–º',
            2: 'P2P –ê–∫—Ç–∏–≤–Ω—ã–µ'
        }
        df_kmeans['cluster_name'] = df_kmeans['cluster'].map(cluster_names)

        col1, col2, col3 = st.columns(3)

        for idx, row in df_kmeans.iterrows():
            with [col1, col2, col3][idx % 3]:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{row['cluster_name']}</h3>
                    <p>–ö–ª–∏–µ–Ω—Ç–æ–≤: {row['count']:,}</p>
                    <p>P2P –¥–æ–ª—è: {row['p2p_ratio'] * 100:.1f}%</p>
                    <p>–°—Ä. –æ–±—ä–µ–º: {row['avg_amount']:,.0f} UZS</p>
                </div>
                """, unsafe_allow_html=True)

    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    st.divider()
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    strategies = {
        'Champions': 'üèÜ VIP –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —É–¥–µ—Ä–∂–∞–Ω–∏–µ',
        'Loyal Customers': 'üíé –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂–∏',
        'Potential Loyalists': 'üå± –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
        'At Risk': '‚ö†Ô∏è –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç',
        'Hibernating': 'üò¥ Win-back –∫–∞–º–ø–∞–Ω–∏–∏, —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ',
        'Lost': '‚ùå –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ win-back –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π'
    }

    for segment, strategy in strategies.items():
        st.write(f"**{segment}**: {strategy}")


def forecasting_tab(client, models):
    """–í–∫–ª–∞–¥–∫–∞ Volume Forecasting"""

    st.header("üìà Volume Forecasting Analytics")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if 'prophet' not in models:
        st.error("Prophet –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python ml/volume_forecasting.py`")
        return

    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    st.warning("""
    ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (MAPE: 3022%) –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–∫–æ–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º 365 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
    """)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö", "101", "–ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ 365", delta_color="inverse")

    with col2:
        st.metric("MAPE", "3022%", "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è", delta_color="inverse")

    with col3:
        st.metric("–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "‚úÖ", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

    with col4:
        st.metric("–ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "‚ö†Ô∏è", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

    st.divider()

    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    st.subheader("üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    historical_data = client.execute("""
        SELECT 
            transaction_date,
            sum(amount_uzs) as volume,
            count() as txn_count
        FROM transactions_optimized
        WHERE transaction_date IS NOT NULL
        GROUP BY transaction_date
        ORDER BY transaction_date
    """)

    if historical_data:
        df_hist = pd.DataFrame(historical_data,
                               columns=['date', 'volume', 'txn_count'])

        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–æ–≤
        fig = go.Figure()

        fig.add_trace(go.Scatter(
            x=df_hist['date'],
            y=df_hist['volume'],
            mode='lines',
            name='–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            line=dict(color='blue', width=2),
            fill='tozeroy',
            fillcolor='rgba(0, 100, 200, 0.2)'
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        df_hist['ma7'] = df_hist['volume'].rolling(window=7, min_periods=1).mean()

        fig.add_trace(go.Scatter(
            x=df_hist['date'],
            y=df_hist['ma7'],
            mode='lines',
            name='MA(7)',
            line=dict(color='red', width=2, dash='dash')
        ))

        fig.update_layout(
            title='–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—ä–µ–º–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–û–±—ä–µ–º (UZS)',
            hovermode='x unified',
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2 = st.columns(2)

        with col1:
            st.info(f"""
            **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–æ–≤:**
            - –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º: {df_hist['volume'].mean():,.0f} UZS
            - –ú–∞–∫—Å–∏–º—É–º: {df_hist['volume'].max():,.0f} UZS
            - –ú–∏–Ω–∏–º—É–º: {df_hist['volume'].min():,.0f} UZS
            - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {df_hist['volume'].std() / df_hist['volume'].mean() * 100:.1f}%
            """)

        with col2:
            st.info(f"""
            **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:**
            - –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {df_hist['txn_count'].mean():.0f}
            - –ú–∞–∫—Å–∏–º—É–º: {df_hist['txn_count'].max():,}
            - –ú–∏–Ω–∏–º—É–º: {df_hist['txn_count'].min():,}
            - –í—Å–µ–≥–æ –¥–Ω–µ–π: {len(df_hist)}
            """)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.divider()
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")

    recommendations = [
        "üìÖ –ù–∞–∫–æ–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º 1 –≥–æ–¥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "üéØ –î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏)",
        "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä—ã (–∫—É—Ä—Å –≤–∞–ª—é—Ç, –∏–Ω—Ñ–ª—è—Ü–∏—è)",
        "üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å –º–æ–¥–µ–ª—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        "üìà –†–∞–∑–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (P2P, –ø–æ–∫—É–ø–∫–∏)",
        "üè™ –°—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–ø MCC –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    ]

    for rec in recommendations:
        st.write(rec)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ Machine Learning Analytics Platform")
    st.markdown("**–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –º–æ–¥–µ–ª–µ–π**")

    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
        models = load_models()

        st.divider()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        client = get_client()

        try:
            total_txn = client.execute("SELECT count() FROM transactions_optimized")[0][0]
            total_features = client.execute("SELECT count() FROM card_features")[0][0]
            total_segments = client.execute("SELECT count() FROM customer_segments")[0][0]

            st.metric("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", f"{total_txn:,}")
            st.metric("–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ", f"{total_features:,}")
            st.metric("–ö–ª–∏–µ–Ω—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ", f"{total_segments:,}")
        except:
            st.warning("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        st.divider()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.info("""
        **ML –ú–æ–¥–µ–ª–∏:**
        - Fraud Detection (XGBoost)
        - Customer Segmentation (K-means + RFM)
        - Volume Forecasting (Prophet)

        **–ú–µ—Ç—Ä–∏–∫–∏:**
        - ROC-AUC: 0.876
        - 615 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
        - 101 –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        """)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üö® Fraud Detection",
        "üë• Customer Segmentation",
        "üìà Volume Forecasting",
        "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ])

    with tab1:
        fraud_detection_tab(client, models)

    with tab2:
        segmentation_tab(client, models)

    with tab3:
        forecasting_tab(client, models)

    with tab4:
        st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML –º–æ–¥–µ–ª–µ–π")

        # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("""
            <div class="metric-card">
                <h3>üö® Fraud Detection</h3>
                <p class="success-metric">ROC-AUC: 0.876 ‚úÖ</p>
                <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 100,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                <p>–ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–æ–¥–æ–≤: 39,143</p>
                <p>–¢–æ—á–Ω–æ—Å—Ç—å: 77%</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div class="metric-card">
                <h3>üë• Segmentation</h3>
                <p class="success-metric">615 –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚úÖ</p>
                <p>RFM —Å–µ–≥–º–µ–Ω—Ç–æ–≤: 6</p>
                <p>K-means –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: 3</p>
                <p>Champions: 19.8%</p>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div class="metric-card">
                <h3>üìà Forecasting</h3>
                <p class="warning-metric">MAPE: 3022% ‚ö†Ô∏è</p>
                <p>–î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö: 101</p>
                <p>–ü—Ä–æ–≥–Ω–æ–∑: 30 –¥–Ω–µ–π</p>
                <p>–¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
            """, unsafe_allow_html=True)

        st.divider()

        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã")

        st.success("""
        **–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ:**
        1. ‚úÖ Fraud Detection –º–æ–¥–µ–ª—å —Å ROC-AUC 0.876 (–ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π 0.85)
        2. ‚úÖ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è 615 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ RFM –∏ K-means –≥—Ä—É–ø–ø—ã
        3. ‚úÖ –í—ã—è–≤–ª–µ–Ω –∫–ª—é—á–µ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ—Ä–æ–¥–∞ - P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (72.67% –≤–∞–∂–Ω–æ—Å—Ç–∏)
        4. ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∂–¥—ã–º —Å–µ–≥–º–µ–Ω—Ç–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        """)

        st.warning("""
        **–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:**
        1. ‚ö†Ô∏è Volume Forecasting - –Ω–∞–∫–æ–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º 365 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
        2. ‚ö†Ô∏è 24.7% –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ Lost - –Ω—É–∂–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        3. ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π False Positive Rate (26.5%) –≤ fraud detection
        """)

        st.info("""
        **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
        1. üìä –í–Ω–µ–¥—Ä–∏—Ç—å real-time scoring –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        2. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        3. üìà –û–±–Ω–æ–≤–ª—è—Ç—å –º–æ–¥–µ–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        4. üîÑ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        """)


if __name__ == "__main__":
    main()